apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  namespace: wifire-kg
data:
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:airflow@postgres:5432/airflow"
  AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://airflow:airflow@postgres:5432/airflow"
  AIRFLOW__CELERY__BROKER_URL: "redis://redis:6379/0"
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  AIRFLOW__CORE__EXECUTOR: "CeleryExecutor"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  namespace: wifire-kg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      containers:
        - name: airflow-webserver
          image: apache/airflow:latest
          args: ["webserver"]
          envFrom:
            - configMapRef:
                name: airflow-config
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 90
            timeoutSeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 90
            timeoutSeconds: 5
            periodSeconds: 10
      volumes:
        - name: dags-volume
          persistentVolumeClaim:
            claimName: airflow-dags-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
  namespace: wifire-kg
spec:
  type: ClusterIP
  selector:
    app: airflow-webserver
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  namespace: wifire-kg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      containers:
        - name: airflow-scheduler
          image: apache/airflow:latest
          args: ["scheduler"]
          envFrom:
            - configMapRef:
                name: airflow-config
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
      volumes:
        - name: dags-volume
          persistentVolumeClaim:
            claimName: airflow-dags-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-worker
  namespace: wifire-kg
spec:
  replicas: 2
  selector:
    matchLabels:
      app: airflow-worker
  template:
    metadata:
      labels:
        app: airflow-worker
    spec:
      containers:
        - name: airflow-worker
          image: apache/airflow:latest
          args: ["celery", "worker"]
          envFrom:
            - configMapRef:
                name: airflow-config
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
      volumes:
        - name: dags-volume
          persistentVolumeClaim:
            claimName: airflow-dags-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: wifire-kg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              value: "airflow"
            - name: POSTGRES_PASSWORD
              value: "airflow"
            - name: POSTGRES_DB
              value: "airflow"
          ports:
            - containerPort: 5432
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: wifire-kg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "200m"
              memory: "512Mi"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-dags-pvc
  namespace: wifire-kg
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: wifire-kg
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: wifire-kg
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: wifire-kg
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: airflow-ingress
  namespace: wifire-kg
  annotations:
    kubernetes.io/ingress.class: haproxy
spec:
  rules:
  - host: airflow.nrp-nautilus.io
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: airflow-webserver
            port:
              number: 8080
  tls:
  - hosts:
    - airflow.nrp-nautilus.io
